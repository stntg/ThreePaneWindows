"""
Type stubs for threepanewindows.flexible module.

Enhanced Flexible Layout System with Professional Detached Window Management.
"""

import tkinter as tk
from dataclasses import dataclass
from enum import Enum
from tkinter import ttk
from typing import Any, Callable, Dict, List, Optional, Union

class LayoutDirection(Enum):
    HORIZONTAL: str
    VERTICAL: str

@dataclass
class FlexPaneConfig:
    """Enhanced configuration for a flexible pane with professional detached window support."""

    name: str
    title: str
    weight: float = ...
    min_size: int = ...
    max_size: Optional[int] = ...
    detachable: bool = ...
    fill_detached_space: bool = ...
    builder: Optional[Callable[[tk.Frame], None]] = ...

    # Enhanced detached window properties
    custom_titlebar: bool = ...
    default_width: int = ...
    detached_height: int = ...
    min_width: int = ...
    max_width: int = ...
    detached_scrollable: bool = ...
    window_icon: str = ...
    icon: str = ...

    # Theme and styling
    header_bg: str = ...
    header_fg: str = ...
    button_bg: str = ...
    button_fg: str = ...
    button_hover_bg: str = ...
    button_hover_fg: str = ...

@dataclass
class FlexContainer:
    """Container configuration for flexible layouts."""

    direction: LayoutDirection
    children: List[Union[FlexPaneConfig, "FlexContainer"]]
    weight: float = ...

class EnhancedFlexibleLayout(tk.Frame):
    """
    Enhanced flexible layout system with professional detached window management.

    This combines the flexible layout system with all the advanced detached window
    functionality from the enhanced dockable module, including custom titlebars,
    theming, scrollable content, and proper restoration capabilities.
    """

    def __init__(
        self,
        parent: tk.Widget,
        layout_config: FlexContainer,
        theme_name: str = ...,
        **kwargs: Any,
    ) -> None: ...
    def get_pane(self, name: str) -> Optional[tk.Frame]: ...
    def detach_pane(self, name: str) -> bool: ...
    def reattach_pane(self, name: str) -> bool: ...
    def is_pane_detached(self, name: str) -> bool: ...
    def get_detached_windows(self) -> List[tk.Toplevel]: ...
    def close_all_detached(self) -> None: ...
    def apply_theme(self, theme_name: str) -> None: ...
    def get_pane_config(self, name: str) -> Optional[FlexPaneConfig]: ...
    def update_pane_config(self, name: str, **kwargs: Any) -> bool: ...
    def get_layout_info(self) -> Dict[str, Any]: ...
    def save_layout_state(self) -> Dict[str, Any]: ...
    def restore_layout_state(self, state: Dict[str, Any]) -> bool: ...
