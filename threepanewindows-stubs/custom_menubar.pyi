"""
Type stubs for threepanewindows.custom_menubar module.

Custom Themeable Menubar that works on all platforms.
"""

import tkinter as tk
from dataclasses import dataclass
from typing import Any, Callable, Dict, List, Optional, Union

@dataclass
class MenuItem:
    """Represents a menu item."""

    label: str
    command: Optional[Callable] = ...
    submenu: Optional[List["MenuItem"]] = ...
    separator: bool = ...
    accelerator: Optional[str] = ...
    state: str = ...  # normal, disabled, active

class CustomMenubar(tk.Frame):
    """
    Custom menubar that can be fully themed on all platforms.

    This replaces the native tk.Menu menubar with a custom implementation
    using Tkinter widgets that can be fully themed.
    """

    def __init__(self, parent: tk.Tk, **kwargs: Any) -> None: ...
    def add_menu(self, name: str, items: List[MenuItem]) -> None: ...
    def remove_menu(self, name: str) -> bool: ...
    def update_menu(self, name: str, items: List[MenuItem]) -> bool: ...
    def get_menu_names(self) -> List[str]: ...
    def clear_all_menus(self) -> None: ...
    def set_menu_state(self, menu_name: str, state: str) -> bool: ...
    def set_item_state(self, menu_name: str, item_label: str, state: str) -> bool: ...
    def apply_theme(self, theme_colors: Dict[str, str]) -> None: ...
    def bind_accelerators(self) -> None: ...
    def unbind_accelerators(self) -> None: ...

    # Event handling
    def on_menu_click(self, menu_name: str) -> None: ...
    def on_menu_enter(self, menu_name: str) -> None: ...
    def on_menu_leave(self, menu_name: str) -> None: ...
    def show_dropdown(self, menu_name: str) -> None: ...
    def hide_dropdown(self) -> None: ...
