# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharm
#  project, it is recommended to ignore the whole .idea directory.
.idea/

# VS Code
.vscode/
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
!.vscode/*.code-snippets

# Local History for Visual Studio Code
.history/

# Built Visual Studio Code Extensions
*.vsix

# macOS
.DS_Store
.AppleDouble
.LSOverride

# Windows
Thumbs.db
Thumbs.db:encryptable
ehthumbs.db
ehthumbs_vista.db
*.tmp
*.temp
*.swp
*.swo
*~

# Temporary files
*.bak
*.orig

# Test artifacts
.coverage
htmlcov/
.pytest_cache/
test-results/

# Documentation builds
docs/_build/
docs/build/

# Release artifacts
release/

# Development files folder (contains all dev/test files)
dev_files/

# Individual development and testing files (in case they're not moved)
debug_ttk_styles.py
fixed_theming_example.py
test_dramatic_theming.py
test_theme_example.py
test_theming_debug.py
verify_theming_fix.py
test_both_examples.py
test_enhanced.py
test_fixed_width_features.py
test_reattach.py
test_version_parsing.py
test_cross_platform_icons.py
test_final_fixes.py
run_examples_demo.py
interactive_demo.py
test_fixes.py
verify_fixed_width.py
verify_package.py
debug_toggle.py
verify_positioning.py
debug_demo.py
example_complete_theming.py
example_cross_platform_theming.py
example_macos_theming.py
example_platform_demo.py

# Legacy/deprecated files
DockableThreePaneWindow.py
FixedThreePaneWindow.py
enhanced_example.py
example_usage.py
simple_fixed_width_example.py
window_utils.py

# Development summaries and research
research.md
dev/SUMMARY_*.md

# Monitoring scripts
monitor_workflows.ps1
monitor_workflows.py

# Development tools
dev_tools.py
run_tests.py

# Local test files (keep these local-only)
tests/test_runner.py
tests/pytest_local.ini
tests/pytest_robust.ini
tests/LOCAL_TESTING_README.md
tests/test_local_examples.py


# Enhanced coverage tests (include in remote repo)
# The following files have been REMOVED from gitignore to include in repo:
# - tests/test_enhanced_coverage.py (new comprehensive coverage tests)
#
# Note: Other test files may be enhanced versions of existing tests
# and should be reviewed before including in remote repo

# Local test scripts
run_local_tests.bat
run_local_tests.sh

# Local test documentation (keep local-only)
LOCAL_TEST_SUITE_SUMMARY.md
LOCAL_TEST_GITIGNORE.txt
TESTING_EXAMPLES_FIX.md
TEST_FIXES_SUMMARY.md

# Enhanced test documentation (include in remote repo)
# The following files have been REMOVED from gitignore to include in repo:
# - ENHANCED_TESTS_README.md (comprehensive test documentation)
# - pytest_ci.ini (CI/CD friendly configuration)

# Local test artifacts
htmlcov_local/
.coverage_local
pytest_local.ini
pytest_robust.ini
*_local.xml
*_local.json

# Local test cache
.pytest_cache_local/
__pycache__/test_*
tests/__pycache__/test_enhanced_*
tests/__pycache__/test_themes*
tests/__pycache__/test_cli*
tests/__pycache__/test_examples*
tests/__pycache__/test_version*
tests/__pycache__/test_integration*

# Tox configuration (if not needed)
tox.ini

# Additional OS specific files (extending existing)
desktop.ini

# Additional temporary file patterns
*.tmp
*.temp

# Prevent duplicate package files in root directory
# (These should only exist in threepanewindows/ directory)
/__init__.py
/_version.py
