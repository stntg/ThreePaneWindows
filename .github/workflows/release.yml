name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  id-token: write

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    # Set up virtual display for GUI testing
    - name: Set up virtual display
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb x11-utils
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 3
    
    - name: Install dependencies
      timeout-minutes: 10
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,test]
    
    - name: Run full test suite
      timeout-minutes: 20
      env:
        DISPLAY: :99
      run: |
        pytest tests/ --cov=threepanewindows -v
        flake8 threepanewindows/
        mypy threepanewindows/ --ignore-missing-imports || true
        bandit -r threepanewindows/ || true

  build:
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      timeout-minutes: 5
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      timeout-minutes: 5
      run: python -m build
    
    - name: Check package
      timeout-minutes: 5
      run: |
        twine check dist/*
        # Verify package contents
        python -m tarfile -l dist/*.tar.gz
        python -c "import zipfile; [print(f) for f in zipfile.ZipFile('dist/' + [f for f in __import__('os').listdir('dist/') if f.endswith('.whl')][0]).namelist()]"
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  test-pypi-publish:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
    
    - name: Install twine
      run: |
        python -m pip install --upgrade pip
        pip install twine
    
    - name: Check Test PyPI token availability
      id: check-token
      run: |
        if [ -z "${{ secrets.TEST_PYPI_API_TOKEN }}" ]; then
          echo "Test PyPI token not available. Skipping Test PyPI upload."
          echo "token-available=false" >> $GITHUB_OUTPUT
        else
          echo "Test PyPI token available. Proceeding with upload."
          echo "token-available=true" >> $GITHUB_OUTPUT
        fi
    
    - name: Publish to Test PyPI
      if: steps.check-token.outputs.token-available == 'true'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        echo "🚀 Publishing package to Test PyPI..."
        python -m twine upload --repository testpypi dist/* --verbose --skip-existing
        echo "✅ Package successfully uploaded to Test PyPI!"
    
    - name: Test PyPI upload skipped
      if: steps.check-token.outputs.token-available == 'false'
      run: |
        echo "⚠️ Test PyPI upload was skipped because TEST_PYPI_API_TOKEN secret is not configured."
    
    - name: Test installation from Test PyPI
      if: steps.check-token.outputs.token-available == 'true'
      timeout-minutes: 10
      run: |
        echo "⏳ Waiting for package to be available on Test PyPI..."
        sleep 60
        echo "📥 Installing from Test PyPI..."
        python -m pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ threepanewindows
        echo "✅ Testing import..."
        python -c "import threepanewindows; print(f'Successfully imported threepanewindows v{threepanewindows.__version__}')"

  approval:
    needs: test-pypi-publish
    runs-on: ubuntu-latest
    timeout-minutes: 5
    environment: production-release
    steps:
    - name: Manual approval checkpoint
      run: |
        echo "✅ Test PyPI upload successful!"
        echo "✅ Package installation from Test PyPI verified!"
        echo "🚀 Ready for production PyPI release"
        echo ""
        echo "Please verify the package on Test PyPI:"
        echo "https://test.pypi.org/project/threepanewindows/"
        echo ""
        echo "If everything looks good, approve this workflow to proceed with production release."

  publish:
    needs: approval
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
    
    - name: Install twine
      run: |
        python -m pip install --upgrade pip
        pip install twine
    
    - name: Check PyPI token availability
      id: check-token
      run: |
        if [ -z "${{ secrets.PYPI_API_TOKEN }}" ]; then
          echo "PyPI token not available. Skipping PyPI upload."
          echo "token-available=false" >> $GITHUB_OUTPUT
        else
          echo "PyPI token available. Proceeding with upload."
          echo "token-available=true" >> $GITHUB_OUTPUT
        fi
    
    - name: Publish to PyPI
      if: steps.check-token.outputs.token-available == 'true'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        echo "🚀 Publishing package to PyPI..."
        python -m twine upload dist/* --verbose
        echo "✅ Package successfully published to PyPI!"
    
    - name: PyPI upload skipped
      if: steps.check-token.outputs.token-available == 'false'
      run: |
        echo "⚠️ PyPI upload was skipped because PYPI_API_TOKEN secret is not configured."
        echo ""
        echo "To enable PyPI publishing:"
        echo "1. Go to your repository Settings > Secrets and variables > Actions"
        echo "2. Add a new repository secret named 'PYPI_API_TOKEN'"
        echo "3. Set the value to your PyPI API token"
        echo "4. Re-run this workflow"
    
    - name: Verify PyPI publication
      if: steps.check-token.outputs.token-available == 'true'
      timeout-minutes: 10
      run: |
        echo "⏳ Waiting for package to be available on PyPI..."
        sleep 60
        echo "📥 Installing from PyPI..."
        python -m pip install threepanewindows
        echo "✅ Verifying installation..."
        python -c "import threepanewindows; print(f'✅ Successfully installed threepanewindows v{threepanewindows.__version__} from PyPI')"

  github-release:
    needs: publish
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: write  # Required for creating releases
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
    
    - name: Extract release notes
      id: extract-notes
      timeout-minutes: 5
      run: |
        # Extract release notes from CHANGELOG.md for this version
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        
        # Try to extract changelog section for this version
        if grep -q "## \[$VERSION\]" CHANGELOG.md; then
          sed -n "/## \[$VERSION\]/,/## \[/p" CHANGELOG.md | sed '$d' > release_notes.md
        else
          echo "Release $VERSION" > release_notes.md
          echo "" >> release_notes.md
          echo "See [CHANGELOG.md](CHANGELOG.md) for details." >> release_notes.md
        fi
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: dist/*
        body_path: release_notes.md
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
