name: Test PyPI Upload

on:
  workflow_dispatch:
    inputs:
      version_suffix:
        description: 'Version suffix for test (e.g., dev1, rc1, alpha1, beta1) - will be made PEP 440 compliant'
        required: false
        type: string
        default: 'dev1'
      skip_tests:
        description: 'Skip running tests before upload'
        required: false
        type: boolean
        default: false
  push:
    branches:
      - develop
      - feature/*
    paths:
      - 'threepanewindows/**'
      - 'pyproject.toml'
      - 'setup.py'

jobs:
  test-pypi-upload:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for version calculation

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Set up virtual display
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb x11-utils
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 3

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine setuptools wheel

    - name: Generate test version
      id: version
      run: |
        # Install toml parsing library for older Python versions
        pip install tomli-w tomli 2>/dev/null || true

        # Get current version from pyproject.toml
        CURRENT_VERSION=$(python -c "
        try:
            import tomllib
            with open('pyproject.toml', 'rb') as f:
                data = tomllib.load(f)
        except ImportError:
            import tomli
            with open('pyproject.toml', 'rb') as f:
                data = tomli.load(f)
        print(data['project']['version'])
        ")

        # Generate PEP 440 compliant version for test uploads
        TIMESTAMP=$(date +%Y%m%d%H%M%S)
        SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)

        if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ inputs.version_suffix }}" ]; then
          # For manual dispatch with version suffix
          # Convert timestamp to simple integer for PEP 440 compliance
          DEV_NUMBER=$(date +%s)  # Unix timestamp as dev number

          # Handle different suffix types for PEP 440 compliance
          SUFFIX="${{ inputs.version_suffix }}"
          case "$SUFFIX" in
            dev*)
              # Extract number from dev suffix (e.g., dev1 -> 1)
              DEV_SUFFIX=$(echo "$SUFFIX" | sed 's/dev//')
              if [ -z "$DEV_SUFFIX" ]; then
                DEV_SUFFIX="1"
              fi
              TEST_VERSION="${CURRENT_VERSION}.dev${DEV_SUFFIX}${DEV_NUMBER}"
              ;;
            alpha*|a*)
              # Extract number from alpha suffix (e.g., alpha1 -> 1, a1 -> 1)
              ALPHA_NUM=$(echo "$SUFFIX" | sed 's/alpha\|a//')
              if [ -z "$ALPHA_NUM" ]; then
                ALPHA_NUM="1"
              fi
              TEST_VERSION="${CURRENT_VERSION}a${ALPHA_NUM}.dev${DEV_NUMBER}"
              ;;
            beta*|b*)
              # Extract number from beta suffix (e.g., beta1 -> 1, b1 -> 1)
              BETA_NUM=$(echo "$SUFFIX" | sed 's/beta\|b//')
              if [ -z "$BETA_NUM" ]; then
                BETA_NUM="1"
              fi
              TEST_VERSION="${CURRENT_VERSION}b${BETA_NUM}.dev${DEV_NUMBER}"
              ;;
            rc*)
              # Extract number from rc suffix (e.g., rc1 -> 1)
              RC_NUM=$(echo "$SUFFIX" | sed 's/rc//')
              if [ -z "$RC_NUM" ]; then
                RC_NUM="1"
              fi
              TEST_VERSION="${CURRENT_VERSION}rc${RC_NUM}.dev${DEV_NUMBER}"
              ;;
            *)
              # For any other suffix, treat as dev version
              TEST_VERSION="${CURRENT_VERSION}.dev${DEV_NUMBER}"
              ;;
          esac
        else
          # For automatic triggers, use PEP 440 compliant dev version
          # Format: X.Y.Z.devN where N is a simple integer (Unix timestamp)
          DEV_NUMBER=$(date +%s)  # Unix timestamp as dev number
          TEST_VERSION="${CURRENT_VERSION}.dev${DEV_NUMBER}"
        fi

        echo "test_version=${TEST_VERSION}" >> $GITHUB_OUTPUT
        echo "current_version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT
        echo "üì¶ Test version: ${TEST_VERSION}"

        # Validate PEP 440 compliance
        echo "üîç Validating PEP 440 compliance..."
        python -c "
        import re
        version = '${TEST_VERSION}'
        # PEP 440 regex pattern (simplified)
        pep440_pattern = r'^([1-9][0-9]*!)?(0|[1-9][0-9]*)(\.(0|[1-9][0-9]*))*((a|b|rc)(0|[1-9][0-9]*))?(\.post(0|[1-9][0-9]*))?(\.dev(0|[1-9][0-9]*))?$'
        if re.match(pep440_pattern, version):
            print(f'‚úÖ Version {version} is PEP 440 compliant')
        else:
            print(f'‚ùå Version {version} is NOT PEP 440 compliant')
            exit(1)
        "

    - name: Update version for test upload
      run: |
        # Update version in _version.py
        sed -i 's/__version__ = ".*"/__version__ = "${{ steps.version.outputs.test_version }}"/' threepanewindows/_version.py

        # Update version in pyproject.toml
        sed -i 's/version = ".*"/version = "${{ steps.version.outputs.test_version }}"/' pyproject.toml

        echo "‚úÖ Updated version to ${{ steps.version.outputs.test_version }}"
        echo "üìÑ Version files updated:"
        grep -n "version" threepanewindows/_version.py pyproject.toml

    - name: Run quick tests
      if: ${{ !inputs.skip_tests }}
      timeout-minutes: 10
      env:
        DISPLAY: :99
      run: |
        echo "üß™ Installing test dependencies..."
        pip install pytest pytest-cov pytest-xvfb pytest-timeout darkdetect

        echo "üß™ Installing package in development mode..."
        pip install -e .

        echo "üß™ Running quick test suite..."
        python -m pytest tests/ -v --tb=short --maxfail=3 -x

        echo "‚úÖ Quick tests passed"

    - name: Build package
      timeout-minutes: 5
      run: |
        echo "üî® Building package..."
        python -m build

        echo "üì¶ Build artifacts:"
        ls -la dist/

    - name: Check package integrity
      timeout-minutes: 3
      run: |
        echo "üîç Checking package with twine..."
        twine check dist/*

        echo "üìã Package contents (source):"
        python -m tarfile -l dist/*.tar.gz | head -20

        echo "üìã Package contents (wheel):"
        python -c "
        import zipfile
        import os
        wheel_files = [f for f in os.listdir('dist/') if f.endswith('.whl')]
        if wheel_files:
            with zipfile.ZipFile(f'dist/{wheel_files[0]}') as zf:
                files = zf.namelist()[:20]  # Show first 20 files
                for f in files:
                    print(f)
                if len(zf.namelist()) > 20:
                    print(f'... and {len(zf.namelist()) - 20} more files')
        "

    - name: Install twine
      run: |
        python -m pip install --upgrade pip
        pip install twine

    - name: Check Test PyPI token availability
      id: check-token
      run: |
        if [ -z "${{ secrets.TEST_PYPI_API_TOKEN }}" ]; then
          echo "Test PyPI token not available. Skipping Test PyPI upload."
          echo "token-available=false" >> $GITHUB_OUTPUT
        else
          echo "Test PyPI token available. Proceeding with upload."
          echo "token-available=true" >> $GITHUB_OUTPUT
        fi

    - name: Upload to Test PyPI
      if: steps.check-token.outputs.token-available == 'true'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        echo "üöÄ Publishing package to Test PyPI..."
        python -m twine upload --repository testpypi dist/* --verbose --skip-existing
        echo "‚úÖ Package successfully uploaded to Test PyPI!"

    - name: Test PyPI upload skipped
      if: steps.check-token.outputs.token-available == 'false'
      run: |
        echo "‚ö†Ô∏è Test PyPI upload was skipped because TEST_PYPI_API_TOKEN secret is not configured."
        echo ""
        echo "To enable Test PyPI publishing:"
        echo "1. Create an account at https://test.pypi.org"
        echo "2. Generate an API token at https://test.pypi.org/manage/account/"
        echo "3. Go to your repository Settings > Secrets and variables > Actions"
        echo "4. Add a new repository secret named 'TEST_PYPI_API_TOKEN'"
        echo "5. Set the value to your Test PyPI API token"
        echo "6. Re-run this workflow"

    - name: Test installation from Test PyPI
      if: steps.check-token.outputs.token-available == 'true'
      timeout-minutes: 10
      env:
        DISPLAY: :99
      run: |
        echo "‚è≥ Waiting for package to be available on Test PyPI..."
        sleep 30

        echo "üì• Installing from Test PyPI..."
        # Create a fresh environment for testing
        python -m venv test_env
        source test_env/bin/activate

        # Install from Test PyPI with retries
        for i in {1..3}; do
          echo "üì• Installation attempt $i..."
          if pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ threepanewindows==${{ steps.version.outputs.test_version }}; then
            echo "‚úÖ Installation successful on attempt $i"
            break
          else
            echo "‚ùå Installation failed on attempt $i"
            if [ $i -eq 3 ]; then
              echo "‚ùå All installation attempts failed"
              exit 1
            fi
            sleep 30
          fi
        done

        echo "üß™ Testing basic functionality..."
        python -c "
        import sys
        print(f'Python version: {sys.version}')

        import threepanewindows
        print(f'‚úÖ Successfully imported threepanewindows v{threepanewindows.__version__}')
        print(f'üì¶ Available classes: {threepanewindows.__all__}')

        # Test basic functionality without creating actual windows
        print('üß™ Testing imports...')
        from threepanewindows import FixedThreePaneWindow, DockableThreePaneWindow
        print('‚úÖ Core classes imported successfully')

        # Test CLI availability
        try:
            from threepanewindows.cli import main
            print('‚úÖ CLI module available')
        except ImportError as e:
            print(f'‚ö†Ô∏è  CLI module import issue: {e}')

        print('üéâ Basic functionality test completed!')
        "

        deactivate

    - name: Create summary
      if: always()
      run: |
        echo "## üì¶ Test PyPI Upload Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Original Version:** ${{ steps.version.outputs.current_version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Test Version:** ${{ steps.version.outputs.test_version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Test PyPI URL:** https://test.pypi.org/project/threepanewindows/${{ steps.version.outputs.test_version }}/" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîó Quick Links" >> $GITHUB_STEP_SUMMARY
        echo "- [Test PyPI Project Page](https://test.pypi.org/project/threepanewindows/)" >> $GITHUB_STEP_SUMMARY
        echo "- [Installation Command](https://test.pypi.org/project/threepanewindows/${{ steps.version.outputs.test_version }}/)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üì• Install Command" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ threepanewindows==${{ steps.version.outputs.test_version }}" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

    - name: Upload build artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-pypi-dist-${{ steps.version.outputs.test_version }}
        path: dist/
        retention-days: 7
