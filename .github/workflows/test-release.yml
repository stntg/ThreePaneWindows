name: Test Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to test (e.g., 0.1.0-rc1)'
        required: true
        type: string
      test_pypi_only:
        description: 'Upload to Test PyPI only (no production release)'
        required: false
        type: boolean
        default: true

jobs:
  test-build:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    # Set up virtual display for GUI testing
    - name: Set up virtual display
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb x11-utils
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 3
    
    - name: Install dependencies
      timeout-minutes: 5
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Update version for testing
      timeout-minutes: 2
      run: |
        # Update version in _version.py
        sed -i 's/__version__ = ".*"/__version__ = "${{ inputs.version }}"/' threepanewindows/_version.py
        
        # Update version in pyproject.toml
        sed -i 's/version = ".*"/version = "${{ inputs.version }}"/' pyproject.toml
        
        echo "Updated version to ${{ inputs.version }}"
        grep -n "version" threepanewindows/_version.py pyproject.toml
    
    - name: Build package
      timeout-minutes: 5
      run: python -m build
    
    - name: Check package
      timeout-minutes: 5
      run: |
        twine check dist/*
        echo "üì¶ Package contents:"
        python -m tarfile -l dist/*.tar.gz
        echo ""
        echo "üéØ Wheel contents:"
        python -c "import zipfile; [print(f) for f in zipfile.ZipFile('dist/' + [f for f in __import__('os').listdir('dist/') if f.endswith('.whl')][0]).namelist()]"
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: test-dist
        path: dist/

  test-pypi-upload:
    needs: test-build
    runs-on: ubuntu-latest
    timeout-minutes: 20
    environment: test-release
    permissions:
      id-token: write
      contents: read
    steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    # Set up virtual display for GUI testing
    - name: Set up virtual display
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb x11-utils
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 3
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: test-dist
        path: dist/
    
    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        skip-existing: true
    
    - name: Test installation from Test PyPI
      timeout-minutes: 15
      env:
        DISPLAY: :99
      run: |
        echo "‚è≥ Waiting for package to be available on Test PyPI..."
        sleep 60
        
        echo "üì• Installing from Test PyPI..."
        python -m pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ threepanewindows==${{ inputs.version }}
        
        echo "‚úÖ Testing import..."
        python -c "
        import threepanewindows
        print(f'Successfully imported threepanewindows v{threepanewindows.__version__}')
        print(f'Available classes: {threepanewindows.__all__}')
        
        # Test basic functionality
        import tkinter as tk
        root = tk.Tk()
        root.withdraw()  # Hide window
        
        try:
            from threepanewindows import FixedThreePaneWindow
            window = FixedThreePaneWindow(root)
            print('‚úÖ FixedThreePaneWindow created successfully')
            window.destroy()
        except Exception as e:
            print(f'‚ùå Error creating FixedThreePaneWindow: {e}')
            raise
        finally:
            root.destroy()
        "
        
        echo "üéâ Test PyPI installation and basic functionality test completed!"

  production-release:
    if: ${{ !inputs.test_pypi_only }}
    needs: test-pypi-upload
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment: production-release
    permissions:
      id-token: write
      contents: read
    steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: test-dist
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
    
    - name: Verify PyPI publication
      timeout-minutes: 10
      run: |
        echo "‚è≥ Waiting for package to be available on PyPI..."
        sleep 60
        
        echo "üì• Installing from PyPI..."
        python -m pip install threepanewindows==${{ inputs.version }}
        
        echo "‚úÖ Verifying installation..."
        python -c "
        import threepanewindows
        print(f'‚úÖ Successfully installed threepanewindows v{threepanewindows.__version__} from PyPI')
        "
        
        echo "üéâ Production PyPI release completed successfully!"