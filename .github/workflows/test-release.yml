name: Test Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to test (e.g., 0.1.0-rc1)'
        required: true
        type: string
      test_pypi_only:
        description: 'Upload to Test PyPI only (no production release)'
        required: false
        type: boolean
        default: true

permissions:
  contents: read

jobs:
  test-build:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    # Set up virtual display for GUI testing
    - name: Set up virtual display
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb x11-utils
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 3

    - name: Install dependencies
      timeout-minutes: 5
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Update version for testing
      timeout-minutes: 2
      run: |
        # Update version in _version.py
        sed -i 's/__version__ = ".*"/__version__ = "${{ inputs.version }}"/' threepanewindows/_version.py

        # Update version in pyproject.toml
        sed -i 's/version = ".*"/version = "${{ inputs.version }}"/' pyproject.toml

        echo "Updated version to ${{ inputs.version }}"
        grep -n "version" threepanewindows/_version.py pyproject.toml

    - name: Build package
      timeout-minutes: 5
      run: python -m build

    - name: Check package
      timeout-minutes: 5
      run: |
        twine check dist/*
        echo "üì¶ Package contents:"
        python -m tarfile -l dist/*.tar.gz
        echo ""
        echo "üéØ Wheel contents:"
        python -c "import zipfile; [print(f) for f in zipfile.ZipFile('dist/' + [f for f in __import__('os').listdir('dist/') if f.endswith('.whl')][0]).namelist()]"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: test-dist
        path: dist/

  test-pypi-upload:
    needs: test-build
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    # Set up virtual display for GUI testing
    - name: Set up virtual display
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb x11-utils
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 3

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: test-dist
        path: dist/

    - name: Install twine
      run: |
        python -m pip install --upgrade pip
        pip install twine

    - name: Check Test PyPI token availability
      id: check-token
      run: |
        if [ -z "${{ secrets.TEST_PYPI_API_TOKEN }}" ]; then
          echo "Test PyPI token not available. Skipping Test PyPI upload."
          echo "token-available=false" >> $GITHUB_OUTPUT
        else
          echo "Test PyPI token available. Proceeding with upload."
          echo "token-available=true" >> $GITHUB_OUTPUT
        fi

    - name: Publish to Test PyPI
      if: steps.check-token.outputs.token-available == 'true'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        echo "üöÄ Publishing package to Test PyPI..."
        python -m twine upload --repository testpypi dist/* --verbose --skip-existing
        echo "‚úÖ Package successfully uploaded to Test PyPI!"

    - name: Test PyPI upload skipped
      if: steps.check-token.outputs.token-available == 'false'
      run: |
        echo "‚ö†Ô∏è Test PyPI upload was skipped because TEST_PYPI_API_TOKEN secret is not configured."
        echo ""
        echo "To enable Test PyPI publishing:"
        echo "1. Create an account at https://test.pypi.org"
        echo "2. Generate an API token at https://test.pypi.org/manage/account/"
        echo "3. Go to your repository Settings > Secrets and variables > Actions"
        echo "4. Add a new repository secret named 'TEST_PYPI_API_TOKEN'"
        echo "5. Set the value to your Test PyPI API token"
        echo "6. Re-run this workflow"

    - name: Test installation from Test PyPI
      timeout-minutes: 15
      env:
        DISPLAY: :99
      run: |
        echo "‚è≥ Waiting for package to be available on Test PyPI..."
        sleep 60

        echo "üì• Installing from Test PyPI..."
        python -m pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ threepanewindows==${{ inputs.version }}

        echo "‚úÖ Testing import..."
        python -c "
        import threepanewindows
        print(f'Successfully imported threepanewindows v{threepanewindows.__version__}')
        print(f'Available classes: {threepanewindows.__all__}')

        # Test basic functionality
        import tkinter as tk
        root = tk.Tk()
        root.withdraw()  # Hide window

        try:
            from threepanewindows import FixedThreePaneWindow
            window = FixedThreePaneWindow(root)
            print('‚úÖ FixedThreePaneWindow created successfully')
            window.destroy()
        except Exception as e:
            print(f'‚ùå Error creating FixedThreePaneWindow: {e}')
            raise
        finally:
            root.destroy()
        "

        echo "üéâ Test PyPI installation and basic functionality test completed!"

  production-release:
    if: ${{ !inputs.test_pypi_only }}
    needs: test-pypi-upload
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: test-dist
        path: dist/

    - name: Install twine
      run: |
        python -m pip install --upgrade pip
        pip install twine

    - name: Check PyPI token availability
      id: check-token
      run: |
        if [ -z "${{ secrets.PYPI_API_TOKEN }}" ]; then
          echo "PyPI token not available. Skipping PyPI upload."
          echo "token-available=false" >> $GITHUB_OUTPUT
        else
          echo "PyPI token available. Proceeding with upload."
          echo "token-available=true" >> $GITHUB_OUTPUT
        fi

    - name: Publish to PyPI
      if: steps.check-token.outputs.token-available == 'true'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        echo "üöÄ Publishing package to PyPI..."
        python -m twine upload dist/* --verbose
        echo "‚úÖ Package successfully published to PyPI!"

    - name: PyPI upload skipped
      if: steps.check-token.outputs.token-available == 'false'
      run: |
        echo "‚ö†Ô∏è PyPI upload was skipped because PYPI_API_TOKEN secret is not configured."
        echo ""
        echo "To enable PyPI publishing:"
        echo "1. Go to your repository Settings > Secrets and variables > Actions"
        echo "2. Add a new repository secret named 'PYPI_API_TOKEN'"
        echo "3. Set the value to your PyPI API token"
        echo "4. Re-run this workflow"

    - name: Verify PyPI publication
      timeout-minutes: 10
      run: |
        echo "‚è≥ Waiting for package to be available on PyPI..."
        sleep 60

        echo "üì• Installing from PyPI..."
        python -m pip install threepanewindows==${{ inputs.version }}

        echo "‚úÖ Verifying installation..."
        python -c "
        import threepanewindows
        print(f'‚úÖ Successfully installed threepanewindows v{threepanewindows.__version__} from PyPI')
        "

        echo "üéâ Production PyPI release completed successfully!"
